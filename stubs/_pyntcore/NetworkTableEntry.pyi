from types import DynamicClassAttribute
from typing import Any, List

from .NetworkTableType import NetworkTableType
from .Value import Value

class NetworkTableEntry:
    def getName(self) -> str: ...
    def getType(self) -> NetworkTableType: ...

    def getValue(self) -> Value: ...
    def setValue(self, value: Any) -> bool: ...

    @DynamicClassAttribute
    def value(self) -> Any: ...

    def getBoolean(self, defaultValue: bool) -> bool: ...
    def getDouble(self, defaultValue: float) -> float: ...
    def getString(self, defaultValue: str) -> str: ...
    def getRaw(self, defaultValue: str) -> str: ...
    def getBooleanArray(self, defaultValue: List[bool]) -> List[bool]: ...
    def getDoubleArray(self, defaultValue: List[float]) -> List[float]: ...
    def getStringArray(self, defaultValue: List[str]) -> List[str]: ...

    def setBoolean(self, value: bool) -> bool: ...
    def setDouble(self, value: float) -> bool: ...
    def setString(self, value: str) -> bool: ...
    def setRaw(self, value: str) -> bool: ...
    def setBooleanArray(self, value: List[bool]) -> bool: ...
    def setDoubleArray(self, value: List[float]) -> bool: ...
    def setStringArray(self, value: List[str]) -> bool: ...

    def delete(self): ...
